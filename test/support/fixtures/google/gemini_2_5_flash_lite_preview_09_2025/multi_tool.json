{
  "request": {
    "body": {
      "b64": "eyJjb250ZW50cyI6W3sicGFydHMiOlt7InRleHQiOiJXaGF0J3MgdGhlIHdlYXRoZXIgbGlrZSBpbiBQYXJpcywgRnJhbmNlPyJ9XSwicm9sZSI6InVzZXIifV0sImdlbmVyYXRpb25Db25maWciOnsiY2FuZGlkYXRlQ291bnQiOjEsIm1heE91dHB1dFRva2VucyI6MzAwLCJ0ZW1wZXJhdHVyZSI6MC4wLCJ0aGlua2luZ0NvbmZpZyI6eyJpbmNsdWRlVGhvdWdodHMiOnRydWUsInRoaW5raW5nQnVkZ2V0Ijo0MDk2fX0sInRvb2xzIjpbeyJmdW5jdGlvbkRlY2xhcmF0aW9ucyI6W3siZGVzY3JpcHRpb24iOiJHZXQgY3VycmVudCB3ZWF0aGVyIGluZm9ybWF0aW9uIGZvciBhIGxvY2F0aW9uIiwibmFtZSI6ImdldF93ZWF0aGVyIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7ImxvY2F0aW9uIjp7InR5cGUiOiJzdHJpbmcifSwidW5pdCI6eyJlbnVtIjpbImNlbHNpdXMiLCJmYWhyZW5oZWl0Il0sInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImxvY2F0aW9uIl0sInR5cGUiOiJvYmplY3QifX0seyJkZXNjcmlwdGlvbiI6IlRlbGwgYSBmdW5ueSBqb2tlIiwibmFtZSI6InRlbGxfam9rZSIsInBhcmFtZXRlcnMiOnsicHJvcGVydGllcyI6eyJ0b3BpYyI6eyJkZXNjcmlwdGlvbiI6IlRvcGljIGZvciB0aGUgam9rZSIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0seyJkZXNjcmlwdGlvbiI6IkdldCB0aGUgY3VycmVudCB0aW1lIiwibmFtZSI6ImdldF90aW1lIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7fSwidHlwZSI6Im9iamVjdCJ9fV19XX0="
    },
    "canonical_json": {
      "contents": [
        {
          "parts": [
            {
              "text": "What's the weather like in Paris, France?"
            }
          ],
          "role": "user"
        }
      ],
      "generationConfig": {
        "candidateCount": 1,
        "maxOutputTokens": 300,
        "temperature": 0.0,
        "thinkingConfig": {
          "includeThoughts": true,
          "thinkingBudget": 4096
        }
      },
      "tools": [
        {
          "functionDeclarations": [
            {
              "description": "Get current weather information for a location",
              "name": "get_weather",
              "parameters": {
                "properties": {
                  "location": {
                    "type": "string"
                  },
                  "unit": {
                    "enum": [
                      "celsius",
                      "fahrenheit"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "location"
                ],
                "type": "object"
              }
            },
            {
              "description": "Tell a funny joke",
              "name": "tell_joke",
              "parameters": {
                "properties": {
                  "topic": {
                    "description": "Topic for the joke",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            {
              "description": "Get the current time",
              "name": "get_time",
              "parameters": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite-preview-09-2025:generateContent?key=%5BREDACTED%3Akey%5D"
  },
  "response": {
    "body": {
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "**Processing the Weather Request**\n\nOkay, so the user wants the weather for Paris. Straightforward enough. I need to figure out the best way to get that information. Let's see... I have a few tools at my disposal: `get_weather`, `tell_joke`, and `get_time`.  Obviously, `get_weather` is the tool I want here.  It's built for exactly this.\n\nNow, I need to make sure I call it correctly. The `get_weather` tool takes a `location` argument, and an optional `unit` argument. I already have the location: \"Paris, France\". So I'll put that in. No unit specified, so I can probably leave that out.\n\nAlright, time to construct the tool call. I'll make sure it's properly formatted.  The required structure is: `default_api:get_weather{location: \"Paris, France\"}`. That should do the trick. Now I just need to present this in the correct JSON format and send it off.\n",
                "thought": true
              },
              {
                "functionCall": {
                  "args": {
                    "location": "Paris, France"
                  },
                  "name": "get_weather"
                },
                "thoughtSignature": "CtkGAdHtim8KZImK7tcT47J5myGOqE7J5ofvqBHDB8lzuLKnoVWxdCqjQMcX/+PdBih4zGt3aVymFkS2uWWnjp2r2hhGZO85EE9AeISxgyQ82FFTuhntkhb6QAWRyhBCUmwALVEBYYMdlKJKgpzYzPliXpn75rp3L/4gvKGMpU09aaPU5hUdLuHjOGd3dNGljuLGPs6kW5bEj51sW5WZD9NEymziInOhiR8ihiBnyo/e5uW4nbihxX/VSBQH6bJ5u/bZAFNZrDRbCN+WCvbRBhwo+DCKcr78ShKr+XJJizuOHpOqR9TXsFXU/WelDze22Mx0kHWqYNdrcTtSbsBpWwvqR26WQ/Wl65vLFPSnQj+BsHOBSwFRR3qK06dUudYhKjaTpHxcnO0zm9rBfxQX3mrO9MLP/5cT41Je9aX6w+DwmbCCjZwwb1GTD7fglW1PfxNWoA7582C79Ln926G7YmucdLBwrr/8a7kJfW0thquXa9XZk62z/qO7VVdC5+OL31V2S4Ehi1Q0c9OX2+Noc5PIa6G44CmqFaN509KqSat2ssd5qMFIiAbbFUo3AwBhmGKAI1bYH6fl6QyvSM1OxHHz2u2B+YUPMClRipLqkBAloJxsxzx9XMHPglMrHI+FLkvdFd0to6Wu+8+Tlz48WKBsf6S9OFqlL3sIxDNporPjd3UQwVXtpOey+aFz9xOLBWt1Oss/wwTS0ONG2oEsedCCQEloc6LIeVDJSc8S31S69wqWcXxeOhdtt5xNSBu6BUx8EoieAfkKRUn4q/n2BGYi2dfWqud+XY4bEDM44nmnJeHqNdomXCwxANqApDooGvrl2zQEAdusO1C1j2NPeMKRQEQrl5rjlG80ZppUeu1en1tx4liu33srjDcFCE8nx3KhO57D/25gYPa0YTruqyepQfyk+m/oDyAWYHgv5UrFCu4VAPiS3MAkPL/bdGEffC2X/Iq9NOP3WJBJ97vwY6xbrSyz2t3vB6OAAzZSKPhTXuBFbcBsKJHf4sIJYxnCw0AxQ3NSkZ/KnwDgnoc0V6nmBZktkIoxOntMd3BueO++7rfLWL//w3f4c9lVmtClPqLn+ZOo1Fv0UWzU649h/LBZ+ne6QvKIyLRpIUrgBkUPyYkQeXnVFQnnres="
              }
            ],
            "role": "model"
          },
          "finishReason": "STOP",
          "index": 0
        }
      ],
      "modelVersion": "gemini-2.5-flash-lite-preview-09-2025",
      "responseId": "l1vgaJOJDPi0_uMP0Z7YuAE",
      "usageMetadata": {
        "candidatesTokenCount": 21,
        "promptTokenCount": 142,
        "promptTokensDetails": [
          {
            "modality": "TEXT",
            "tokenCount": 142
          }
        ],
        "thoughtsTokenCount": 214,
        "totalTokenCount": 377
      }
    },
    "headers": {
      "alt-svc": [
        "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
      ],
      "content-type": [
        "application/json; charset=UTF-8"
      ],
      "date": [
        "Fri, 03 Oct 2025 23:26:15 GMT"
      ],
      "server": [
        "scaffolding on HTTPServer2"
      ],
      "server-timing": [
        "gfet4t7; dur=1951"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Origin",
        "X-Origin",
        "Referer"
      ],
      "x-content-type-options": [
        "nosniff"
      ],
      "x-frame-options": [
        "SAMEORIGIN"
      ],
      "x-xss-protection": [
        "0"
      ]
    },
    "status": 200
  }
}