{
  "request": {
    "body": {
      "b64": "eyJjb250ZW50cyI6W3sicGFydHMiOlt7InRleHQiOiJXaGF0J3MgdGhlIHdlYXRoZXIgbGlrZSBpbiBQYXJpcywgRnJhbmNlPyJ9XSwicm9sZSI6InVzZXIifV0sImdlbmVyYXRpb25Db25maWciOnsiY2FuZGlkYXRlQ291bnQiOjEsIm1heE91dHB1dFRva2VucyI6MzAwLCJ0ZW1wZXJhdHVyZSI6MC4wLCJ0aGlua2luZ0NvbmZpZyI6eyJpbmNsdWRlVGhvdWdodHMiOnRydWUsInRoaW5raW5nQnVkZ2V0Ijo0MDk2fX0sInRvb2xzIjpbeyJmdW5jdGlvbkRlY2xhcmF0aW9ucyI6W3siZGVzY3JpcHRpb24iOiJHZXQgY3VycmVudCB3ZWF0aGVyIGluZm9ybWF0aW9uIGZvciBhIGxvY2F0aW9uIiwibmFtZSI6ImdldF93ZWF0aGVyIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7ImxvY2F0aW9uIjp7InR5cGUiOiJzdHJpbmcifSwidW5pdCI6eyJlbnVtIjpbImNlbHNpdXMiLCJmYWhyZW5oZWl0Il0sInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImxvY2F0aW9uIl0sInR5cGUiOiJvYmplY3QifX0seyJkZXNjcmlwdGlvbiI6IlRlbGwgYSBmdW5ueSBqb2tlIiwibmFtZSI6InRlbGxfam9rZSIsInBhcmFtZXRlcnMiOnsicHJvcGVydGllcyI6eyJ0b3BpYyI6eyJkZXNjcmlwdGlvbiI6IlRvcGljIGZvciB0aGUgam9rZSIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0seyJkZXNjcmlwdGlvbiI6IkdldCB0aGUgY3VycmVudCB0aW1lIiwibmFtZSI6ImdldF90aW1lIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7fSwidHlwZSI6Im9iamVjdCJ9fV19XX0="
    },
    "canonical_json": {
      "contents": [
        {
          "parts": [
            {
              "text": "What's the weather like in Paris, France?"
            }
          ],
          "role": "user"
        }
      ],
      "generationConfig": {
        "candidateCount": 1,
        "maxOutputTokens": 300,
        "temperature": 0.0,
        "thinkingConfig": {
          "includeThoughts": true,
          "thinkingBudget": 4096
        }
      },
      "tools": [
        {
          "functionDeclarations": [
            {
              "description": "Get current weather information for a location",
              "name": "get_weather",
              "parameters": {
                "properties": {
                  "location": {
                    "type": "string"
                  },
                  "unit": {
                    "enum": [
                      "celsius",
                      "fahrenheit"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "location"
                ],
                "type": "object"
              }
            },
            {
              "description": "Tell a funny joke",
              "name": "tell_joke",
              "parameters": {
                "properties": {
                  "topic": {
                    "description": "Topic for the joke",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            {
              "description": "Get the current time",
              "name": "get_time",
              "parameters": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-05-06:generateContent?key=%5BREDACTED%3Akey%5D"
  },
  "response": {
    "body": {
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "**Thinking Through the Weather Query**\n\nOkay, here's what I'm thinking. The user wants to know the weather, so naturally, I'm drawn to the `get_weather` function. That seems like the right tool for the job.\n\nNow, let's look at the parameters. It needs a `location`, which the user conveniently provided as \"Paris, France\". Perfect, that's straightforward. It also has a `unit` parameter, but since the user didn't mention Celsius or Fahrenheit, I'll go with the default. No need to overcomplicate things here.\n\nSo, the plan is this: I'll call the `get_weather` function with `location` set to \"Paris, France\". Simple and direct. It should give me the answer the user's looking for.\n",
                "thought": true
              }
            ],
            "role": "model"
          },
          "finishReason": "MAX_TOKENS",
          "index": 0
        }
      ],
      "modelVersion": "models/gemini-2.5-pro",
      "responseId": "wVvgaOLnFb-U_uMPpo7IiAg",
      "usageMetadata": {
        "promptTokenCount": 142,
        "promptTokensDetails": [
          {
            "modality": "TEXT",
            "tokenCount": 142
          }
        ],
        "thoughtsTokenCount": 299,
        "totalTokenCount": 441
      }
    },
    "headers": {
      "alt-svc": [
        "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
      ],
      "content-type": [
        "application/json; charset=UTF-8"
      ],
      "date": [
        "Fri, 03 Oct 2025 23:26:57 GMT"
      ],
      "server": [
        "scaffolding on HTTPServer2"
      ],
      "server-timing": [
        "gfet4t7; dur=4637"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Origin",
        "X-Origin",
        "Referer"
      ],
      "x-content-type-options": [
        "nosniff"
      ],
      "x-frame-options": [
        "SAMEORIGIN"
      ],
      "x-xss-protection": [
        "0"
      ]
    },
    "status": 200
  }
}