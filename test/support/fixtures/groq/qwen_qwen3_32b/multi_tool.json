{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjozMjc2LCJtZXNzYWdlcyI6W3siY29udGVudCI6IldoYXQncyB0aGUgd2VhdGhlciBsaWtlIGluIFBhcmlzLCBGcmFuY2U/Iiwicm9sZSI6InVzZXIifV0sIm1vZGVsIjoicXdlbi9xd2VuMy0zMmIiLCJzZWVkIjo0Miwic3RyZWFtIjpmYWxzZSwidGVtcGVyYXR1cmUiOjAuMCwidG9vbHMiOlt7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2V0IGN1cnJlbnQgd2VhdGhlciBpbmZvcm1hdGlvbiBmb3IgYSBsb2NhdGlvbiIsIm5hbWUiOiJnZXRfd2VhdGhlciIsInBhcmFtZXRlcnMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlLCJwcm9wZXJ0aWVzIjp7ImxvY2F0aW9uIjp7InR5cGUiOiJzdHJpbmcifSwidW5pdCI6eyJlbnVtIjpbImNlbHNpdXMiLCJmYWhyZW5oZWl0Il0sInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImxvY2F0aW9uIl0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJUZWxsIGEgZnVubnkgam9rZSIsIm5hbWUiOiJ0ZWxsX2pva2UiLCJwYXJhbWV0ZXJzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjpmYWxzZSwicHJvcGVydGllcyI6eyJ0b3BpYyI6eyJkZXNjcmlwdGlvbiI6IlRvcGljIGZvciB0aGUgam9rZSIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJHZXQgdGhlIGN1cnJlbnQgdGltZSIsIm5hbWUiOiJnZXRfdGltZSIsInBhcmFtZXRlcnMiOnsicHJvcGVydGllcyI6e30sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9XX0="
    },
    "canonical_json": {
      "max_tokens": 3276,
      "messages": [
        {
          "content": "What's the weather like in Paris, France?",
          "role": "user"
        }
      ],
      "model": "qwen/qwen3-32b",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tools": [
        {
          "function": {
            "description": "Get current weather information for a location",
            "name": "get_weather",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "location": {
                  "type": "string"
                },
                "unit": {
                  "enum": [
                    "celsius",
                    "fahrenheit"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Tell a funny joke",
            "name": "tell_joke",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "topic": {
                  "description": "Topic for the joke",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Get the current time",
            "name": "get_time",
            "parameters": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://api.groq.com/openai/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "reasoning": "Okay, the user is asking about the weather in Paris, France. Let me check which tool I can use here. The available functions are get_weather, tell_joke, and get_time. The get_weather function seems appropriate here. The parameters required are location and unit. The user didn't specify the unit, so I should probably default to celsius since France uses it. I'll call get_weather with location as Paris, France and unit as celsius.\n",
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"location\":\"Paris, France\",\"unit\":\"celsius\"}",
                  "name": "get_weather"
                },
                "id": "0k3h88zpk",
                "type": "function"
              }
            ]
          }
        }
      ],
      "created": 1760389844,
      "id": "chatcmpl-d012e8e4-17ae-4ee4-97ea-f5f358da2ff5",
      "model": "qwen/qwen3-32b",
      "object": "chat.completion",
      "service_tier": "on_demand",
      "system_fingerprint": "fp_5cf921caa2",
      "usage": {
        "completion_time": 0.242151852,
        "completion_tokens": 126,
        "prompt_time": 0.013145775,
        "prompt_tokens": 286,
        "queue_time": 0.205004085,
        "total_time": 0.255297627,
        "total_tokens": 412
      },
      "usage_breakdown": null,
      "x_groq": {
        "id": "req_01k7fpjjr0ev984yf5p9qkx2s1"
      }
    },
    "headers": {
      "alt-svc": [
        "h3=\":443\"; ma=86400"
      ],
      "cache-control": [
        "private, max-age=0, no-store, no-cache, must-revalidate"
      ],
      "cf-cache-status": [
        "DYNAMIC"
      ],
      "cf-ray": [
        "98e1d34b0828eb07-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Mon, 13 Oct 2025 21:10:44 GMT"
      ],
      "server": [
        "cloudflare"
      ],
      "set-cookie": [
        "__cf_bm=Y5S0M44vUDGTz5AMdnveJC8xt7x7TwByoliKvgpvIsQ-1760389844-1.0.1.1-SIb2iZE_H_SBn2V9TIEVa7swBvOcYuxD_.6k28E0mTpHD1ty06JuELuPZmG_YGwJ_t8xGS9Xxb2R27LgB3VZFTHLvAj4uJT8eZhDHHM9rLY; path=/; expires=Mon, 13-Oct-25 21:40:44 GMT; domain=.groq.com; HttpOnly; Secure; SameSite=None"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Origin"
      ],
      "via": [
        "1.1 google"
      ],
      "x-groq-region": [
        "yul"
      ],
      "x-ratelimit-limit-requests": [
        "1000"
      ],
      "x-ratelimit-limit-tokens": [
        "6000"
      ],
      "x-ratelimit-remaining-requests": [
        "991"
      ],
      "x-ratelimit-remaining-tokens": [
        "4175"
      ],
      "x-ratelimit-reset-requests": [
        "12m57.599999999s"
      ],
      "x-ratelimit-reset-tokens": [
        "18.25s"
      ],
      "x-request-id": [
        "req_01k7fpjjr0ev984yf5p9qkx2s1"
      ]
    },
    "status": 200
  }
}