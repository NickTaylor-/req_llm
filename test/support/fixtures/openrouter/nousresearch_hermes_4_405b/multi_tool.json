{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjoyNjIxNCwibWVzc2FnZXMiOlt7ImNvbnRlbnQiOiJXaGF0J3MgdGhlIHdlYXRoZXIgbGlrZSBpbiBQYXJpcywgRnJhbmNlPyIsInJvbGUiOiJ1c2VyIn1dLCJtb2RlbCI6Im5vdXNyZXNlYXJjaC9oZXJtZXMtNC00MDViIiwibiI6MSwicmVhc29uaW5nX2VmZm9ydCI6ImxvdyIsInNlZWQiOjQyLCJzdHJlYW0iOmZhbHNlLCJ0ZW1wZXJhdHVyZSI6MC4wLCJ0b29scyI6W3siZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJHZXQgY3VycmVudCB3ZWF0aGVyIGluZm9ybWF0aW9uIGZvciBhIGxvY2F0aW9uIiwibmFtZSI6ImdldF93ZWF0aGVyIiwicGFyYW1ldGVycyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6ZmFsc2UsInByb3BlcnRpZXMiOnsibG9jYXRpb24iOnsidHlwZSI6InN0cmluZyJ9LCJ1bml0Ijp7ImVudW0iOlsiY2Vsc2l1cyIsImZhaHJlbmhlaXQiXSwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsibG9jYXRpb24iXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn0seyJmdW5jdGlvbiI6eyJkZXNjcmlwdGlvbiI6IlRlbGwgYSBmdW5ueSBqb2tlIiwibmFtZSI6InRlbGxfam9rZSIsInBhcmFtZXRlcnMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlLCJwcm9wZXJ0aWVzIjp7InRvcGljIjp7ImRlc2NyaXB0aW9uIjoiVG9waWMgZm9yIHRoZSBqb2tlIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn0seyJmdW5jdGlvbiI6eyJkZXNjcmlwdGlvbiI6IkdldCB0aGUgY3VycmVudCB0aW1lIiwibmFtZSI6ImdldF90aW1lIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn1dfQ=="
    },
    "canonical_json": {
      "max_tokens": 26214,
      "messages": [
        {
          "content": "What's the weather like in Paris, France?",
          "role": "user"
        }
      ],
      "model": "nousresearch/hermes-4-405b",
      "n": 1,
      "reasoning_effort": "low",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tools": [
        {
          "function": {
            "description": "Get current weather information for a location",
            "name": "get_weather",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "location": {
                  "type": "string"
                },
                "unit": {
                  "enum": [
                    "celsius",
                    "fahrenheit"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Tell a funny joke",
            "name": "tell_joke",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "topic": {
                  "description": "Topic for the joke",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Get the current time",
            "name": "get_time",
            "parameters": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "\n\n",
            "reasoning": "\nOkay, the user is asking about the weather in Paris, France. Let me think about how to approach this. The available functions are get_weather, tell_joke, and get_time. The user wants weather information, so the get_weather function is the right choice here.\n\nFirst, I need to check the parameters for get_weather. The function requires a location and optionally a unit. The user specified Paris, France, so the location is clear. The unit isn't mentioned, so I should use the default, which is probably Celsius since it's the standard in most places. Wait, the function's parameters say unit can be either Celsius or Fahrenheit. Since the user didn't specify, maybe I should default to Celsius. But maybe the function defaults to Celsius if not provided. Let me check the function signature again. The parameters for get_weather have unit as optional with enum of celsius or fahrenheit. So if not provided, perhaps the default is Celsius. So I can proceed with location: \"Paris, France\" and unit: \"celsius\".\n\nSo the function call would be get_weather with location as \"Paris, France\" and unit as \"celsius\". That should give the current weather there. I don't need to call any other functions here. The user didn't ask for a joke or the time, so just the weather. Let me make sure there's no other possible functions that could be relevant. No, the other functions are for jokes and time, which aren't needed here. So the answer should be a single tool_call with get_weather and the arguments as location: \"Paris, France\", unit: \"celsius\".\n",
            "reasoning_details": [
              {
                "format": "unknown",
                "index": 0,
                "text": "\nOkay, the user is asking about the weather in Paris, France. Let me think about how to approach this. The available functions are get_weather, tell_joke, and get_time. The user wants weather information, so the get_weather function is the right choice here.\n\nFirst, I need to check the parameters for get_weather. The function requires a location and optionally a unit. The user specified Paris, France, so the location is clear. The unit isn't mentioned, so I should use the default, which is probably Celsius since it's the standard in most places. Wait, the function's parameters say unit can be either Celsius or Fahrenheit. Since the user didn't specify, maybe I should default to Celsius. But maybe the function defaults to Celsius if not provided. Let me check the function signature again. The parameters for get_weather have unit as optional with enum of celsius or fahrenheit. So if not provided, perhaps the default is Celsius. So I can proceed with location: \"Paris, France\" and unit: \"celsius\".\n\nSo the function call would be get_weather with location as \"Paris, France\" and unit as \"celsius\". That should give the current weather there. I don't need to call any other functions here. The user didn't ask for a joke or the time, so just the weather. Let me make sure there's no other possible functions that could be relevant. No, the other functions are for jokes and time, which aren't needed here. So the answer should be a single tool_call with get_weather and the arguments as location: \"Paris, France\", unit: \"celsius\".\n",
                "type": "reasoning.text"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"location\": \"Paris\", \"unit\": \"celsius\"}",
                  "name": "get_weather"
                },
                "id": "call_0c2d3f2d69304c1aaf34cfd0",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "tool_calls"
        }
      ],
      "created": 1760547064,
      "id": "gen-1760547064-LL6vchZyXPRxXtJtidAF",
      "model": "nousresearch/hermes-4-405b",
      "object": "chat.completion",
      "provider": "Chutes",
      "usage": {
        "completion_tokens": 359,
        "prompt_tokens": 348,
        "prompt_tokens_details": null,
        "total_tokens": 707
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98f0d1b38fbec8d4-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Wed, 15 Oct 2025 16:51:05 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}