{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjo1MDAsIm1lc3NhZ2VzIjpbeyJjb250ZW50IjoiR2VuZXJhdGUgYSBzb2Z0d2FyZSBlbmdpbmVlciBwcm9maWxlIiwicm9sZSI6InVzZXIifV0sIm1vZGVsIjoibm91c3Jlc2VhcmNoL2hlcm1lcy00LTcwYiIsIm4iOjEsInJlYXNvbmluZ19lZmZvcnQiOiJsb3ciLCJzZWVkIjo0Miwic3RyZWFtIjpmYWxzZSwidGVtcGVyYXR1cmUiOjAuMCwidG9vbF9jaG9pY2UiOnsiZnVuY3Rpb24iOnsibmFtZSI6InN0cnVjdHVyZWRfb3V0cHV0In0sInR5cGUiOiJmdW5jdGlvbiJ9LCJ0b29scyI6W3siZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJHZW5lcmF0ZSBzdHJ1Y3R1cmVkIG91dHB1dCBtYXRjaGluZyB0aGUgcHJvdmlkZWQgc2NoZW1hIiwibmFtZSI6InN0cnVjdHVyZWRfb3V0cHV0IiwicGFyYW1ldGVycyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6ZmFsc2UsInByb3BlcnRpZXMiOnsiYWdlIjp7ImRlc2NyaXB0aW9uIjoiUGVyc29uJ3MgYWdlIGluIHllYXJzIiwibWluaW11bSI6MSwidHlwZSI6ImludGVnZXIifSwibmFtZSI6eyJkZXNjcmlwdGlvbiI6IlBlcnNvbidzIGZ1bGwgbmFtZSIsInR5cGUiOiJzdHJpbmcifSwib2NjdXBhdGlvbiI6eyJkZXNjcmlwdGlvbiI6IlBlcnNvbidzIGpvYiBvciBwcm9mZXNzaW9uIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsibmFtZSIsImFnZSJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoiZnVuY3Rpb24ifV19"
    },
    "canonical_json": {
      "max_tokens": 500,
      "messages": [
        {
          "content": "Generate a software engineer profile",
          "role": "user"
        }
      ],
      "model": "nousresearch/hermes-4-70b",
      "n": 1,
      "reasoning_effort": "low",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tool_choice": {
        "function": {
          "name": "structured_output"
        },
        "type": "function"
      },
      "tools": [
        {
          "function": {
            "description": "Generate structured output matching the provided schema",
            "name": "structured_output",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "age": {
                  "description": "Person's age in years",
                  "minimum": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Person's full name",
                  "type": "string"
                },
                "occupation": {
                  "description": "Person's job or profession",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "age"
              ],
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "",
            "reasoning": "\nOkay, the user wants me to generate a software engineer profile. Let me think about what information is needed here. The structured_output function requires a name, age, and occupation. The occupation should be \"Software Engineer\" since that's the profile type. \n\nFirst, I need to come up with a name. Maybe a common name like John Doe. Then, the age. Let's pick a reasonable age for a software engineer, maybe 30. That's a typical age for someone in the field. \n\nWait, the function parameters are name, age, and occupation. The occupation is already set to Software Engineer. So the arguments for structured_output would be name: \"John Doe\", age: 30, occupation: \"Software Engineer\". \n\nI should make sure the age is an integer and the name is a string. The function requires name and age as mandatory, so those are covered. Occupation is optional but provided here. \n\nLet me check if there are any other parameters, but the schema says only those three. So the function call should be straightforward. No need for any other tools. Just pass the required fields. \n\nYes, that should do it. The output will be a JSON object with the function name structured_output and the arguments as specified.\n",
            "reasoning_details": [
              {
                "format": "unknown",
                "index": 0,
                "text": "\nOkay, the user wants me to generate a software engineer profile. Let me think about what information is needed here. The structured_output function requires a name, age, and occupation. The occupation should be \"Software Engineer\" since that's the profile type. \n\nFirst, I need to come up with a name. Maybe a common name like John Doe. Then, the age. Let's pick a reasonable age for a software engineer, maybe 30. That's a typical age for someone in the field. \n\nWait, the function parameters are name, age, and occupation. The occupation is already set to Software Engineer. So the arguments for structured_output would be name: \"John Doe\", age: 30, occupation: \"Software Engineer\". \n\nI should make sure the age is an integer and the name is a string. The function requires name and age as mandatory, so those are covered. Occupation is optional but provided here. \n\nLet me check if there are any other parameters, but the schema says only those three. So the function call should be straightforward. No need for any other tools. Just pass the required fields. \n\nYes, that should do it. The output will be a JSON object with the function name structured_output and the arguments as specified.\n",
                "type": "reasoning.text"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"age\": 30, \"name\": \"John Doe\", \"occupation\": \"Software Engineer\"}",
                  "name": "structured_output"
                },
                "id": "call_09f19b262b4344d4941ac1cb",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "tool_calls"
        }
      ],
      "created": 1760547023,
      "id": "gen-1760547023-4CmQP12vkxWolS8lvfgC",
      "model": "nousresearch/hermes-4-70b",
      "object": "chat.completion",
      "provider": "Chutes",
      "usage": {
        "completion_tokens": 291,
        "prompt_tokens": 286,
        "prompt_tokens_details": null,
        "total_tokens": 577
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98f0d0b33aadeaf5-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Wed, 15 Oct 2025 16:50:25 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}