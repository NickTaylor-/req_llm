{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjoyNTYwMCwibWVzc2FnZXMiOlt7ImNvbnRlbnQiOiJXaGF0J3MgdGhlIHdlYXRoZXIgbGlrZSBpbiBQYXJpcywgRnJhbmNlPyIsInJvbGUiOiJ1c2VyIn1dLCJtb2RlbCI6Im9wZW5haS9ncHQtNS1uYW5vIiwibiI6MSwicmVhc29uaW5nX2VmZm9ydCI6ImxvdyIsInNlZWQiOjQyLCJzdHJlYW0iOmZhbHNlLCJ0ZW1wZXJhdHVyZSI6MC4wLCJ0b29scyI6W3siZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJHZXQgY3VycmVudCB3ZWF0aGVyIGluZm9ybWF0aW9uIGZvciBhIGxvY2F0aW9uIiwibmFtZSI6ImdldF93ZWF0aGVyIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7ImxvY2F0aW9uIjp7InR5cGUiOiJzdHJpbmcifSwidW5pdCI6eyJlbnVtIjpbImNlbHNpdXMiLCJmYWhyZW5oZWl0Il0sInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImxvY2F0aW9uIl0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJUZWxsIGEgZnVubnkgam9rZSIsIm5hbWUiOiJ0ZWxsX2pva2UiLCJwYXJhbWV0ZXJzIjp7InByb3BlcnRpZXMiOnsidG9waWMiOnsiZGVzY3JpcHRpb24iOiJUb3BpYyBmb3IgdGhlIGpva2UiLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2V0IHRoZSBjdXJyZW50IHRpbWUiLCJuYW1lIjoiZ2V0X3RpbWUiLCJwYXJhbWV0ZXJzIjp7InByb3BlcnRpZXMiOnt9LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoiZnVuY3Rpb24ifV19"
    },
    "canonical_json": {
      "max_tokens": 25600,
      "messages": [
        {
          "content": "What's the weather like in Paris, France?",
          "role": "user"
        }
      ],
      "model": "openai/gpt-5-nano",
      "n": 1,
      "reasoning_effort": "low",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tools": [
        {
          "function": {
            "description": "Get current weather information for a location",
            "name": "get_weather",
            "parameters": {
              "properties": {
                "location": {
                  "type": "string"
                },
                "unit": {
                  "enum": [
                    "celsius",
                    "fahrenheit"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Tell a funny joke",
            "name": "tell_joke",
            "parameters": {
              "properties": {
                "topic": {
                  "description": "Topic for the joke",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Get the current time",
            "name": "get_time",
            "parameters": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "",
            "reasoning": "**Fetching weather info**\n\nI need to get the current weather for Paris, France. Since the tool specifies a unit, I'll choose Celsius, which seems like the default. I want to make sure I call the right function to retrieve this data accurately. Once I have the weather information, I'll present it neatly to the user. So, I'll go ahead and use functions.get_weather!",
            "reasoning_details": [
              {
                "format": "openai-responses-v1",
                "index": 0,
                "summary": "**Fetching weather info**\n\nI need to get the current weather for Paris, France. Since the tool specifies a unit, I'll choose Celsius, which seems like the default. I want to make sure I call the right function to retrieve this data accurately. Once I have the weather information, I'll present it neatly to the user. So, I'll go ahead and use functions.get_weather!",
                "type": "reasoning.summary"
              },
              {
                "data": "gAAAAABo5RwwOQ4QDdcYGvQNBxGdCkzfRm3c2wT3ApVHThIK5iUNK4ajt0z0-1xh_yVG29nixD-p4hrJYncgYsKTQhdH_XUbJI6MhZvmGkO9eK-S3fGGx0cz__LefmF_ouhVKk2M-qcPCZV9vyjz_MBTSC-juf6DePRoiEf4vjDmb5wmOeM9nZCEnbaSYoBcSs7WDMsgen-U7L5GOPLWl3sZ-OJ4nSVcV-aTClIv4ZXcrmQJD5IjiQdt-H7gtCBP__PaRVy1I-gLwFvFO1zkMP92H4nPCPP2r8cbwZJunSVg47fu0e8GITaB1jDM8zgClJKNautkPtfAHmf4QNgT-osppEWbNjnF5hkUGNFur3-YkuCf5PzaSFM2a573vfShrDPKXZTOUDu21cmO5gSI4HQUGalRbCnsXrX4-MuXjOZXdqRd0x9NNjxhbLdT3C_5_9tii1NakuRKkHRTgeM8S3S7ucfomRendGfN_1NA3oS-cRfGsvC4NREdSCW_jDACvkxuZGTfkHEM_rG9Jda1jC-Afhi5EiTiD9HBbCa8T0lWjlGJKvgiqvxxRydf2I75cYIUcir_R5RDxqG6AC5sHHvPwgJmCTf7nMoy1wjXD5eGbB5TB4pxQl2WzHOMzn7PuuFMtyzXNQr3Jlm8u14ZGbyzuiPCzRgKEbspsYZ18z6QAmFRoIx4acQdJk07rtG9iAZZ1gOgoS5Cy57SuW8cMX-8fD2klJdr-aUXnpgB5LoPVMidtX3ar61ws7WwnaItxj23EGZ6fsXQqkoPvrS7OLTSfM5zepyXNuSrRvcc-yOALahviJm6tqXRZszU562VVliKTooU0p4_lKmIH88AcYFJgCBc-iEYr-S1kvcoynpF42uHqJGJpBLJSuPHlM0w-Q4jtX6UJnOwu3nsr04qfx8DAj6RPOctXQ4zUCJECna_qqwG_IMMMVmjqUvHoB7sHDi7RZgvO0An-B05vSw2DCFgKT-ano1VGS25A18Wm-b01OBS-kcb1EpDVy2IgaZOW0LYRY7Rks1fdRUkspO_SajaPw6prw0PDeIbhqWUE8JT20-Icuoi6SDX9DUuM4CiFoCB-2WxXVIrsQQiZhsCn7MUwHFtPeGJjHmOa8SpxyEAJzPc27_Os25FAsqgViln0VyOD88ix7JcwYMbhXRSq50xe_lbdyYyOUcaCY4v1QR7z-pLJvBHJ1r8znMFNk4Bjj54H7n_BLWB",
                "format": "openai-responses-v1",
                "id": "rs_0df490c6bfbc79950168e51c2db918819496aca3e5bbf1cfb7",
                "index": 0,
                "type": "reasoning.encrypted"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"location\":\"Paris, France\",\"unit\":\"celsius\"}",
                  "name": "get_weather"
                },
                "id": "call_goySM7XKp9WpNd61ZMrIG6xZ",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "completed"
        }
      ],
      "created": 1759845421,
      "id": "gen-1759845421-9f9PTMcEyXuuU2QcJCh0",
      "model": "openai/gpt-5-nano",
      "object": "chat.completion",
      "provider": "OpenAI",
      "usage": {
        "completion_tokens": 27,
        "prompt_tokens": 104,
        "total_tokens": 131
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98ade7b92979eae4-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Tue, 07 Oct 2025 13:57:01 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}