{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjo1MDAsIm1lc3NhZ2VzIjpbeyJjb250ZW50IjoiR2VuZXJhdGUgYSBzb2Z0d2FyZSBlbmdpbmVlciBwcm9maWxlIiwicm9sZSI6InVzZXIifV0sIm1vZGVsIjoicXdlbi9xd2VuMy0zMGItYTNiLXRoaW5raW5nLTI1MDciLCJuIjoxLCJyZWFzb25pbmdfZWZmb3J0IjoibG93Iiwic2VlZCI6NDIsInN0cmVhbSI6ZmFsc2UsInRlbXBlcmF0dXJlIjowLjAsInRvb2xfY2hvaWNlIjp7ImZ1bmN0aW9uIjp7Im5hbWUiOiJzdHJ1Y3R1cmVkX291dHB1dCJ9LCJ0eXBlIjoiZnVuY3Rpb24ifSwidG9vbHMiOlt7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2VuZXJhdGUgc3RydWN0dXJlZCBvdXRwdXQgbWF0Y2hpbmcgdGhlIHByb3ZpZGVkIHNjaGVtYSIsIm5hbWUiOiJzdHJ1Y3R1cmVkX291dHB1dCIsInBhcmFtZXRlcnMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlLCJwcm9wZXJ0aWVzIjp7ImFnZSI6eyJkZXNjcmlwdGlvbiI6IlBlcnNvbidzIGFnZSBpbiB5ZWFycyIsIm1pbmltdW0iOjEsInR5cGUiOiJpbnRlZ2VyIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJQZXJzb24ncyBmdWxsIG5hbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm9jY3VwYXRpb24iOnsiZGVzY3JpcHRpb24iOiJQZXJzb24ncyBqb2Igb3IgcHJvZmVzc2lvbiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbIm5hbWUiLCJhZ2UiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn1dfQ=="
    },
    "canonical_json": {
      "max_tokens": 500,
      "messages": [
        {
          "content": "Generate a software engineer profile",
          "role": "user"
        }
      ],
      "model": "qwen/qwen3-30b-a3b-thinking-2507",
      "n": 1,
      "reasoning_effort": "low",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tool_choice": {
        "function": {
          "name": "structured_output"
        },
        "type": "function"
      },
      "tools": [
        {
          "function": {
            "description": "Generate structured output matching the provided schema",
            "name": "structured_output",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "age": {
                  "description": "Person's age in years",
                  "minimum": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Person's full name",
                  "type": "string"
                },
                "occupation": {
                  "description": "Person's job or profession",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "age"
              ],
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "",
            "reasoning": "Okay, the user wants me to generate a software engineer profile. Let me check the tools provided. There's a structured_output function that requires name, age, and occupation. The required fields are name and age, occupation is optional but the user specified \"software engineer\" so I should include that.\n\nFirst, I need to come up with a name. Maybe something common like \"Alex Johnson\". Age should be a positive integer, let's pick 28. Occupation is \"Software Engineer\". Wait, the schema says occupation is a string, so \"Software Engineer\" is fine.\n\nWait, the parameters for structured_output require name and age. Occupation is optional but since the user asked for a software engineer profile, including occupation makes sense. Let me make sure the required fields are covered. Name and age are required, so I'll have those. Occupation can be added as well.\n\nSo the arguments should be name: \"Alex Johnson\", age: 28, occupation: \"Software Engineer\". Let me check the schema again. The occupation is a string, so that's okay. The age must be at least 1, 28 is valid.\n\nI need to output this in the tool_call format. The function name is structured_output, and the arguments are the JSON object with those fields. Let me structure that correctly.\n",
            "reasoning_details": [
              {
                "format": "unknown",
                "index": 0,
                "text": "Okay, the user wants me to generate a software engineer profile. Let me check the tools provided. There's a structured_output function that requires name, age, and occupation. The required fields are name and age, occupation is optional but the user specified \"software engineer\" so I should include that.\n\nFirst, I need to come up with a name. Maybe something common like \"Alex Johnson\". Age should be a positive integer, let's pick 28. Occupation is \"Software Engineer\". Wait, the schema says occupation is a string, so \"Software Engineer\" is fine.\n\nWait, the parameters for structured_output require name and age. Occupation is optional but since the user asked for a software engineer profile, including occupation makes sense. Let me make sure the required fields are covered. Name and age are required, so I'll have those. Occupation can be added as well.\n\nSo the arguments should be name: \"Alex Johnson\", age: 28, occupation: \"Software Engineer\". Let me check the schema again. The occupation is a string, so that's okay. The age must be at least 1, 28 is valid.\n\nI need to output this in the tool_call format. The function name is structured_output, and the arguments are the JSON object with those fields. Let me structure that correctly.\n",
                "type": "reasoning.text"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"age\": 28, \"name\": \"Alex Johnson\", \"occupation\": \"Software Engineer\"}",
                  "name": "structured_output"
                },
                "id": "call_2b2c3da7cdf64cfc92828459",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "tool_calls"
        }
      ],
      "created": 1760532590,
      "id": "gen-1760532590-1dOwN8jJG8397UwCvgt0",
      "model": "qwen/qwen3-30b-a3b-thinking-2507",
      "object": "chat.completion",
      "provider": "Chutes",
      "usage": {
        "completion_tokens": 303,
        "prompt_tokens": 211,
        "prompt_tokens_details": null,
        "total_tokens": 514
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98ef7053bfdf60a1-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Wed, 15 Oct 2025 12:49:52 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}