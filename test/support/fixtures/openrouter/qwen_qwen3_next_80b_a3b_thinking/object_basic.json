{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjo1MDAsIm1lc3NhZ2VzIjpbeyJjb250ZW50IjoiR2VuZXJhdGUgYSBzb2Z0d2FyZSBlbmdpbmVlciBwcm9maWxlIiwicm9sZSI6InVzZXIifV0sIm1vZGVsIjoicXdlbi9xd2VuMy1uZXh0LTgwYi1hM2ItdGhpbmtpbmciLCJuIjoxLCJyZWFzb25pbmdfZWZmb3J0IjoibG93Iiwic2VlZCI6NDIsInN0cmVhbSI6ZmFsc2UsInRlbXBlcmF0dXJlIjowLjAsInRvb2xfY2hvaWNlIjp7ImZ1bmN0aW9uIjp7Im5hbWUiOiJzdHJ1Y3R1cmVkX291dHB1dCJ9LCJ0eXBlIjoiZnVuY3Rpb24ifSwidG9vbHMiOlt7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2VuZXJhdGUgc3RydWN0dXJlZCBvdXRwdXQgbWF0Y2hpbmcgdGhlIHByb3ZpZGVkIHNjaGVtYSIsIm5hbWUiOiJzdHJ1Y3R1cmVkX291dHB1dCIsInBhcmFtZXRlcnMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlLCJwcm9wZXJ0aWVzIjp7ImFnZSI6eyJkZXNjcmlwdGlvbiI6IlBlcnNvbidzIGFnZSBpbiB5ZWFycyIsIm1pbmltdW0iOjEsInR5cGUiOiJpbnRlZ2VyIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJQZXJzb24ncyBmdWxsIG5hbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm9jY3VwYXRpb24iOnsiZGVzY3JpcHRpb24iOiJQZXJzb24ncyBqb2Igb3IgcHJvZmVzc2lvbiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbIm5hbWUiLCJhZ2UiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn1dfQ=="
    },
    "canonical_json": {
      "max_tokens": 500,
      "messages": [
        {
          "content": "Generate a software engineer profile",
          "role": "user"
        }
      ],
      "model": "qwen/qwen3-next-80b-a3b-thinking",
      "n": 1,
      "reasoning_effort": "low",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tool_choice": {
        "function": {
          "name": "structured_output"
        },
        "type": "function"
      },
      "tools": [
        {
          "function": {
            "description": "Generate structured output matching the provided schema",
            "name": "structured_output",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "age": {
                  "description": "Person's age in years",
                  "minimum": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Person's full name",
                  "type": "string"
                },
                "occupation": {
                  "description": "Person's job or profession",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "age"
              ],
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "\n\n",
            "reasoning": "Okay, the user wants me to generate a software engineer profile. Let me check the tools provided. There's a structured_output function that requires name, age, and occupation. The required fields are name and age, occupation is optional but since it's a software engineer profile, I should include that.\n\nFirst, I need to create a name. Maybe something common like \"John Doe\" or \"Jane Smith\". Let's pick \"Alex Johnson\" for a neutral name. Age should be an integer between 1 and maybe 65 or so. Let's say 28, which is a typical age for a software engineer. Occupation is \"Software Engineer\".\n\nWait, the schema says occupation is a string, so that's fine. Let me check the parameters again. The required fields are name and age. So I need to make sure those are present. Occupation is optional but since the user asked for a software engineer profile, including it makes sense.\n\nSo the arguments would be name: \"Alex Johnson\", age: 28, occupation: \"Software Engineer\". Let me confirm the JSON structure. The function name is structured_output, and the arguments should be a JSON object with those keys.\n\nYes, that should work. Let me make sure there are no typos. Age is an integer, so 28 is correct. Name is a string, occupation is a string. All good. So the tool call would be to structured_output with those parameters.\n",
            "reasoning_details": [
              {
                "format": "unknown",
                "index": 0,
                "text": "Okay, the user wants me to generate a software engineer profile. Let me check the tools provided. There's a structured_output function that requires name, age, and occupation. The required fields are name and age, occupation is optional but since it's a software engineer profile, I should include that.\n\nFirst, I need to create a name. Maybe something common like \"John Doe\" or \"Jane Smith\". Let's pick \"Alex Johnson\" for a neutral name. Age should be an integer between 1 and maybe 65 or so. Let's say 28, which is a typical age for a software engineer. Occupation is \"Software Engineer\".\n\nWait, the schema says occupation is a string, so that's fine. Let me check the parameters again. The required fields are name and age. So I need to make sure those are present. Occupation is optional but since the user asked for a software engineer profile, including it makes sense.\n\nSo the arguments would be name: \"Alex Johnson\", age: 28, occupation: \"Software Engineer\". Let me confirm the JSON structure. The function name is structured_output, and the arguments should be a JSON object with those keys.\n\nYes, that should work. Let me make sure there are no typos. Age is an integer, so 28 is correct. Name is a string, occupation is a string. All good. So the tool call would be to structured_output with those parameters.\n",
                "type": "reasoning.text"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"name\": \"Alex Johnson\", \"age\": 28, \"occupation\": \"Software Engineer\"}",
                  "name": "structured_output"
                },
                "id": "call_928c2c220caf4f9abbfd5086",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "tool_calls"
        }
      ],
      "created": 1760532552,
      "id": "gen-1760532552-1i1ncWnwSQ0Kd0M1eNiJ",
      "model": "qwen/qwen3-next-80b-a3b-thinking",
      "object": "chat.completion",
      "provider": "AtlasCloud",
      "usage": {
        "completion_tokens": 332,
        "prompt_tokens": 211,
        "total_tokens": 543
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98ef6f65afd861f2-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Wed, 15 Oct 2025 12:49:13 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}