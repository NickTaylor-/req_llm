{
  "request": {
    "body": {
      "b64": "eyJtYXhfdG9rZW5zIjo4MTksIm1lc3NhZ2VzIjpbeyJjb250ZW50IjoiV2hhdCdzIHRoZSB3ZWF0aGVyIGxpa2UgaW4gUGFyaXMsIEZyYW5jZT8iLCJyb2xlIjoidXNlciJ9XSwibW9kZWwiOiJ4LWFpL2dyb2stMy1taW5pLWJldGEiLCJuIjoxLCJzZWVkIjo0Miwic3RyZWFtIjpmYWxzZSwidGVtcGVyYXR1cmUiOjAuMCwidG9vbHMiOlt7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2V0IGN1cnJlbnQgd2VhdGhlciBpbmZvcm1hdGlvbiBmb3IgYSBsb2NhdGlvbiIsIm5hbWUiOiJnZXRfd2VhdGhlciIsInBhcmFtZXRlcnMiOnsicHJvcGVydGllcyI6eyJsb2NhdGlvbiI6eyJ0eXBlIjoic3RyaW5nIn0sInVuaXQiOnsiZW51bSI6WyJjZWxzaXVzIiwiZmFocmVuaGVpdCJdLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJsb2NhdGlvbiJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiVGVsbCBhIGZ1bm55IGpva2UiLCJuYW1lIjoidGVsbF9qb2tlIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7InRvcGljIjp7ImRlc2NyaXB0aW9uIjoiVG9waWMgZm9yIHRoZSBqb2tlIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn0seyJmdW5jdGlvbiI6eyJkZXNjcmlwdGlvbiI6IkdldCB0aGUgY3VycmVudCB0aW1lIiwibmFtZSI6ImdldF90aW1lIiwicGFyYW1ldGVycyI6eyJwcm9wZXJ0aWVzIjp7fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6ImZ1bmN0aW9uIn1dfQ=="
    },
    "canonical_json": {
      "max_tokens": 819,
      "messages": [
        {
          "content": "What's the weather like in Paris, France?",
          "role": "user"
        }
      ],
      "model": "x-ai/grok-3-mini-beta",
      "n": 1,
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tools": [
        {
          "function": {
            "description": "Get current weather information for a location",
            "name": "get_weather",
            "parameters": {
              "properties": {
                "location": {
                  "type": "string"
                },
                "unit": {
                  "enum": [
                    "celsius",
                    "fahrenheit"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Tell a funny joke",
            "name": "tell_joke",
            "parameters": {
              "properties": {
                "topic": {
                  "description": "Topic for the joke",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Get the current time",
            "name": "get_time",
            "parameters": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://openrouter.ai/api/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "logprobs": null,
          "message": {
            "content": "",
            "reasoning": "First, the user is asking about the weather in Paris, France. I have a function called \"get_weather\" that matches this perfectly. It requires a \"location\" parameter, which is a string.\n\nThe required parameters for \"get_weather\" are:\n\n- location: This is provided as \"Paris, France\", which is straightforward.\n\n- unit: This is optional since it's not in the \"required\" list, but it's an enum with \"celsius\" or \"fahrenheit\". The user didn't specify a unit, so I could either assume a default or ask for clarification. However, the instructions say to call the function if all required parameters are provided or obviously inferable. \"Location\" is required and inferable, so I can proceed.\n\nThe function description: It has \"required\": [\"location\"], so only location is mandatory. Unit is not required, so I can call the function without it.\n\nIn multi-turn conversations, I should continue if needed, but this seems straightforward.\n\nMy response should be clear and not verbose. If I'm calling a function, I use the exact format: <function_call>{\"action\": \"function_name\", \"action_input\": {\"parameter\": \"argument\"}}</function_call>\n\nSo, for this, I should output:\n\n<function_call>{\"action\": \"get_weather\", \"action_input\": {\"location\": \"Paris, France\"}}</function_call>\n\nI don't need to add any other text unless necessary.\n\nIs there any ambiguity? The location is clear: Paris, France. No need to ask for more info.\n\nFinally, ensure the format is precise.",
            "reasoning_details": [
              {
                "format": "unknown",
                "index": 0,
                "text": "First, the user is asking about the weather in Paris, France. I have a function called \"get_weather\" that matches this perfectly. It requires a \"location\" parameter, which is a string.\n\nThe required parameters for \"get_weather\" are:\n\n- location: This is provided as \"Paris, France\", which is straightforward.\n\n- unit: This is optional since it's not in the \"required\" list, but it's an enum with \"celsius\" or \"fahrenheit\". The user didn't specify a unit, so I could either assume a default or ask for clarification. However, the instructions say to call the function if all required parameters are provided or obviously inferable. \"Location\" is required and inferable, so I can proceed.\n\nThe function description: It has \"required\": [\"location\"], so only location is mandatory. Unit is not required, so I can call the function without it.\n\nIn multi-turn conversations, I should continue if needed, but this seems straightforward.\n\nMy response should be clear and not verbose. If I'm calling a function, I use the exact format: <function_call>{\"action\": \"function_name\", \"action_input\": {\"parameter\": \"argument\"}}</function_call>\n\nSo, for this, I should output:\n\n<function_call>{\"action\": \"get_weather\", \"action_input\": {\"location\": \"Paris, France\"}}</function_call>\n\nI don't need to add any other text unless necessary.\n\nIs there any ambiguity? The location is clear: Paris, France. No need to ask for more info.\n\nFinally, ensure the format is precise.",
                "type": "reasoning.text"
              }
            ],
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"location\":\"Paris, France\"}",
                  "name": "get_weather"
                },
                "id": "call_23585349",
                "index": 0,
                "type": "function"
              }
            ]
          },
          "native_finish_reason": "tool_calls"
        }
      ],
      "created": 1759845474,
      "id": "gen-1759845474-8kAxHP0lIszQypEb0QEu",
      "model": "x-ai/grok-3-mini",
      "object": "chat.completion",
      "provider": "xAI",
      "system_fingerprint": "fp_4fae27f477",
      "usage": {
        "completion_tokens": 347,
        "completion_tokens_details": {
          "reasoning_tokens": 319
        },
        "prompt_tokens": 352,
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 351
        },
        "total_tokens": 699
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "cf-ray": [
        "98ade9090f46e1cb-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Tue, 07 Oct 2025 13:57:54 GMT"
      ],
      "permissions-policy": [
        "payment=(self \"https://checkout.stripe.com\" \"https://connect-js.stripe.com\" \"https://js.stripe.com\" \"https://*.js.stripe.com\" \"https://hooks.stripe.com\")"
      ],
      "referrer-policy": [
        "no-referrer, strict-origin-when-cross-origin"
      ],
      "server": [
        "cloudflare"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "Accept-Encoding"
      ],
      "x-content-type-options": [
        "nosniff"
      ]
    },
    "status": 200
  }
}