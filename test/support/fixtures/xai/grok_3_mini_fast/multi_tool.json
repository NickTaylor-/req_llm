{
  "request": {
    "body": {
      "b64": "eyJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOSwibWVzc2FnZXMiOlt7ImNvbnRlbnQiOiJXaGF0J3MgdGhlIHdlYXRoZXIgbGlrZSBpbiBQYXJpcywgRnJhbmNlPyIsInJvbGUiOiJ1c2VyIn1dLCJtb2RlbCI6Imdyb2stMy1taW5pLWZhc3QiLCJzZWVkIjo0Miwic3RyZWFtIjpmYWxzZSwidGVtcGVyYXR1cmUiOjAuMCwidG9vbHMiOlt7ImZ1bmN0aW9uIjp7ImRlc2NyaXB0aW9uIjoiR2V0IGN1cnJlbnQgd2VhdGhlciBpbmZvcm1hdGlvbiBmb3IgYSBsb2NhdGlvbiIsIm5hbWUiOiJnZXRfd2VhdGhlciIsInBhcmFtZXRlcnMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOmZhbHNlLCJwcm9wZXJ0aWVzIjp7ImxvY2F0aW9uIjp7InR5cGUiOiJzdHJpbmcifSwidW5pdCI6eyJlbnVtIjpbImNlbHNpdXMiLCJmYWhyZW5oZWl0Il0sInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImxvY2F0aW9uIl0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJUZWxsIGEgZnVubnkgam9rZSIsIm5hbWUiOiJ0ZWxsX2pva2UiLCJwYXJhbWV0ZXJzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjpmYWxzZSwicHJvcGVydGllcyI6eyJ0b3BpYyI6eyJkZXNjcmlwdGlvbiI6IlRvcGljIGZvciB0aGUgam9rZSIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiZnVuY3Rpb24iOnsiZGVzY3JpcHRpb24iOiJHZXQgdGhlIGN1cnJlbnQgdGltZSIsIm5hbWUiOiJnZXRfdGltZSIsInBhcmFtZXRlcnMiOnsicHJvcGVydGllcyI6e30sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJmdW5jdGlvbiJ9XX0="
    },
    "canonical_json": {
      "max_completion_tokens": 819,
      "messages": [
        {
          "content": "What's the weather like in Paris, France?",
          "role": "user"
        }
      ],
      "model": "grok-3-mini-fast",
      "seed": 42,
      "stream": false,
      "temperature": 0.0,
      "tools": [
        {
          "function": {
            "description": "Get current weather information for a location",
            "name": "get_weather",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "location": {
                  "type": "string"
                },
                "unit": {
                  "enum": [
                    "celsius",
                    "fahrenheit"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Tell a funny joke",
            "name": "tell_joke",
            "parameters": {
              "additionalProperties": false,
              "properties": {
                "topic": {
                  "description": "Topic for the joke",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "function"
        },
        {
          "function": {
            "description": "Get the current time",
            "name": "get_time",
            "parameters": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "function"
        }
      ]
    },
    "headers": {
      "accept-encoding": [
        "gzip"
      ],
      "authorization": "[REDACTED:authorization]",
      "content-type": [
        "application/json"
      ],
      "user-agent": [
        "req/0.5.15"
      ]
    },
    "method": "post",
    "url": "https://api.x.ai/v1/chat/completions"
  },
  "response": {
    "body": {
      "choices": [
        {
          "finish_reason": "tool_calls",
          "index": 0,
          "message": {
            "content": "",
            "reasoning_content": "First, the user is asking about the weather in Paris, France. I have a function called \"get_weather\" that matches this request. It requires a \"location\" parameter, which is a string.\n\nThe location is clearly \"Paris, France\", so I can infer that as the parameter. The function also has an optional \"unit\" parameter, which can be \"celsius\" or \"fahrenheit\". The user didn't specify a unit, so I shouldn't assume one. The function description doesn't mark it as required, so I can call the function without it, and it will probably default to something.\n\nThe available functions list shows: required: [\"location\"], so only location is required. Unit is optional.\n\nI should call the function with the location provided.\n\nMy response should be in the specified format: if I'm calling a function, use <function_call> tags with JSON inside.\n\nSince this directly matches a function, I shouldn't provide any other response text unless necessary. The instructions say: \"Keep your response to user clear; please do not make your response verbose!\" So, just the function call.\n\nFinal decision: Call the \"get_weather\" function with the location \"Paris, France\".\n\nJSON structure: {\"action\": \"get_weather\", \"action_input\": {\"location\": \"Paris, France\"}}\n\nWrap it in <function_call> tags.",
            "refusal": null,
            "role": "assistant",
            "tool_calls": [
              {
                "function": {
                  "arguments": "{\"location\":\"Paris, France\"}",
                  "name": "get_weather"
                },
                "id": "call_62028029",
                "type": "function"
              }
            ]
          }
        }
      ],
      "created": 1760471280,
      "id": "9c84409c-4fdb-fba3-3f81-0f7fae8a27ba_us-east-1",
      "model": "grok-3-mini",
      "object": "chat.completion",
      "system_fingerprint": "fp_4fae27f477",
      "usage": {
        "completion_tokens": 28,
        "completion_tokens_details": {
          "accepted_prediction_tokens": 0,
          "audio_tokens": 0,
          "reasoning_tokens": 271,
          "rejected_prediction_tokens": 0
        },
        "num_sources_used": 0,
        "prompt_tokens": 362,
        "prompt_tokens_details": {
          "audio_tokens": 0,
          "cached_tokens": 4,
          "image_tokens": 0,
          "text_tokens": 362
        },
        "total_tokens": 661
      }
    },
    "headers": {
      "access-control-allow-origin": [
        "*"
      ],
      "access-control-expose-headers": [
        "*"
      ],
      "cf-cache-status": [
        "DYNAMIC"
      ],
      "cf-ray": [
        "98e9977e7e730009-ORD"
      ],
      "connection": [
        "keep-alive"
      ],
      "content-type": [
        "application/json"
      ],
      "date": [
        "Tue, 14 Oct 2025 19:48:03 GMT"
      ],
      "server": [
        "cloudflare"
      ],
      "set-cookie": [
        "__cf_bm=RriGaR_SscNQVflZab3Fyh32ddNN5AvBnX4k9VivUDY-1760471283-1.0.1.1-xsXjS8Agyr7Xu6v.mi_dzva7pp95svOUR4YiHIZ3JggUrw_V_8Y96m8cEQlNwTKDfTfh6AuViHFx3Kq23xorAXsp7rp3CrWoMzsSFhdp8ZI; path=/; expires=Tue, 14-Oct-25 20:18:03 GMT; domain=.x.ai; HttpOnly; Secure; SameSite=None"
      ],
      "strict-transport-security": [
        "max-age=31536000"
      ],
      "transfer-encoding": [
        "chunked"
      ],
      "vary": [
        "origin, access-control-request-method, access-control-request-headers"
      ],
      "x-request-id": [
        "00-9b2ea8365ef94da32c3b8d5d372e070b-cfc7bf6f005aaadb-01"
      ],
      "x-zero-data-retention": [
        "false"
      ]
    },
    "status": 200
  }
}